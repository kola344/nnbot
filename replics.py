from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup, InlineKeyboardButton, KeyboardButton
import db
import config
import keyboards
import os
import branches

'''USERS'''
replic_menu = 'üòÑ –ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é –º–Ω–æ–≥–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π!\nü§î –ù–∞—á–Ω–µ–º?'

def replic_welcome():
    keyboard = []
    for district in config.districts:
        keyboard.append([KeyboardButton(text=district)])
    markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
    text = 'üëã –ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n–£–∫–∞–∂–∏ —Å–≤–æ–π —Ä–∞–π–æ–Ω'
    return text, markup

replic_nobuttonerror = ('ü§î –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–∏–º–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–Ω–æ–ø–∫–∏.')
replic_invalidsession = ('üòï –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è')
replic_nodata = ('ü§î –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞')

def replic_regother(district, edu, public, street):
    if edu == None:
        btn1 = InlineKeyboardButton(text='–£—á–µ–±–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è', callback_data=f'list.all.educations')
    else:
        btn1 = InlineKeyboardButton(text=edu, callback_data=f'list.all.educations')
    if public == None:
        btn2 = InlineKeyboardButton(text='–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞', callback_data=f'list.all.publics')
    else:
        btn2 = InlineKeyboardButton(text=public, callback_data=f'list.all.publics')
    if street == None:
        btn3 = InlineKeyboardButton(text='–£–ª–∏—Ü—ã', callback_data=f'list.all.streets')
    else:
        btn3 = InlineKeyboardButton(text=street, callback_data=f'list.all.streets')
    btn4 = InlineKeyboardButton(text='‚úîÔ∏è –ü—Ä–∏–º–µ–Ω–∏—Ç—å', callback_data=f'reg..end')
    markup = InlineKeyboardMarkup(inline_keyboard=[[btn1], [btn2], [btn3], [btn4]])
    text = f'üòä –û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω —Ä–∞–π–æ–Ω {district}.\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —Ç–≤–æ–µ–º —Ä–∞–π–æ–Ω–µ, –≤—ã–±–∏—Ä–∞—è –∏—Ö –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ'
    return text, markup

def replic_regedu(disctrict):
    place = db.places()
    educations = place.get_educations(disctrict)
    keyboard = []
    for education in educations:
        keyboard.append([InlineKeyboardButton(text=education, callback_data=f'e.e.{education}')])
    keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'menu..')])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = f'üìã –°–ø–∏—Å–æ–∫ —É—á–µ–±–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π —Ä–∞–π–æ–Ω–∞ {disctrict}'
    return text, markup

def replic_regpublics(disctrict):
    place = db.places()
    publics = place.get_public_places(disctrict)
    keyboard = []
    for public in publics:
        keyboard.append([InlineKeyboardButton(text=public, callback_data=f'e.p.{public}')])
    keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'menu..')])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = f'üìã –°–ø–∏—Å–æ–∫ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç —Ä–∞–π–æ–Ω–∞ {disctrict}'
    return text, markup

def replic_regstreets(disctrict):
    place = db.places()
    streets = place.get_streets(disctrict)
    keyboard = []
    for street in streets:
        keyboard.append([InlineKeyboardButton(text=street, callback_data=f'e.s.{street}')])
    keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'menu..')])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = f'üìã –°–ø–∏—Å–æ–∫ —É–ª–∏—Ü —Ä–∞–π–æ–Ω–∞ {disctrict}'
    return text, markup

def replic_profile(user_id):
    user = db.users_db()
    user_data = user.get_userdata(user_id)
    first_name, last_name, username = user_data['first_name'], user_data['last_name'], user_data['username']
    district = user_data['district']
    education, public_place, street = user_data['education'], user_data['public_place'], user_data['street']
    text = f'üë§ –ü—Ä–æ—Ñ–∏–ª—å\n{first_name}\n{last_name} (@{username})\n–†–∞–π–æ–Ω: {district}\n–£—á–µ–±–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ: {education}\n–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ: {public_place}\n–£–ª–∏—Ü–∞: {street}'
    return text, keyboards.keyboard_menubutton

def replic_search():
    tries = branches.get_tries()
    keyboard = []
    for i in tries:
        keyboard.append([InlineKeyboardButton(text=i, callback_data=f'u.t.{i}')])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = 'üòÑ –í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ'
    return text, markup

def replic_informator(tree, branch):
    items = branches.Tree(tree).informator(branch)
    keyboard = []
    for item in items:
        keyboard.append([InlineKeyboardButton(text=item, callback_data=f'u.i.{item}')])
    if branch == []:
        text = tree
    else:
        keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'u.back.')])
        text = branch[-1]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    return text, markup


'''ADMIN'''
replic_notrights = 'üòï –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'
replic_admindisctrict= '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞'
replic_admin_addplace = '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞'
replic_admin_addtree = '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞'
replic_admin_addbranch = '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏'

def replic_admin_districts():
    keyboard = []
    for district in config.districts:
        keyboard.append([InlineKeyboardButton(text=district, callback_data=f'e..{district}')])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = '–í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    return text, markup

def replic_admin_educations(disctrict):
    database = db.places()
    educations = database.get_educations(disctrict)
    keyboard = []
    for education in educations:
        keyboard.append([InlineKeyboardButton(text=education, callback_data=f'del.edu.{education}')])
    keyboard.append([InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data=f'add.edu.{disctrict}')])
    keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'e..{disctrict}')])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = f'–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞ {disctrict}. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ'
    return text, markup

def replic_admin_publicplaces(district):
    database = db.places()
    places = database.get_public_places(district)
    keyboard = []
    for place in places:
        keyboard.append([InlineKeyboardButton(text=place, callback_data=f'del.pub.{place}')])
    keyboard.append([InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data=f'add.public.{district}')])
    keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'e..{district}')])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = f'–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä–∞–π–æ–Ω–∞ {district}. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ'
    return text, markup

def replic_admin_streets(district):
    database = db.places()
    streets = database.get_streets(district)
    keyboard = []
    for street in streets:
        keyboard.append([InlineKeyboardButton(text=street, callback_data=f'del.str.{street}')])
    keyboard.append([InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data=f'add.street.{district}')])
    keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'e..{district}')])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = f'–£–ª–∏—Ü—ã —Ä–∞–π–æ–Ω–∞ {district}. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ'
    return text, markup

def replic_inventory_editor_menu():
    items = branches.get_tries()
    keyboard = []
    for item in items:
        keyboard.append([InlineKeyboardButton(text=item, callback_data=f'tree.e.{item}')])
    keyboard.append([InlineKeyboardButton(text='‚ûï –°–æ–∑–¥–∞—Ç—å', callback_data=f'tree.add.')])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = '–î–µ—Ä–µ–≤—å—è'
    return text, markup

def replic_branch_informator(tree, branch):
    items = branches.Tree(tree).informator(branch)
    keyboard = []
    for item in items:
        keyboard.append([InlineKeyboardButton(text=item, callback_data=f'b.e.{item}')])
    keyboard.append([InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data=f'b.add.')])
    if branch == []:
        keyboard.append([InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ—Ä–µ–≤–æ', callback_data=f'tree.del.{tree}')])
        text = tree
    else:
        keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'b.back.')])
        text = branch[-1]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    return text, markup




